# Medical Management System

A comprehensive Java-based healthcare management solution for managing patients, doctors, consultations, and medical records using JPA (Java Persistence API).

## 🌟 Key Features

### User Management
- Role-based authentication system (Patient/Doctor)
- Secure login/logout functionality
- User profile management

### Patient Portal
- Appointment scheduling and cancellation
- Digital medical records access
- Prescription history
- Consultation tracking

### Doctor Dashboard
- Schedule management with customizable time slots
- Patient appointment validation
- Digital prescription creation
- Medical record management

### Medical Records System
- Comprehensive patient history
- Digital consultation records
- Prescription tracking
- Medical examination results storage

## 🚀 Technology Stack

- **Backend**: Java 11+
- **Database Access**: JPA (Java Persistence API) with Hibernate
- **Database**: MySQL/PostgreSQL
- **Build Tool**: Maven
- **Documentation**: Swagger/OpenAPI

## 📋 System Architecture

### Entity Relationship Overview

```
Utilisateur (Base User)
├── Patient
│   ├── Medical Records
│   ├── Appointments
│   └── Prescriptions
└── Medecin (Doctor)
    ├── Specialization
    ├── Available Slots
    └── Consultations
```

## ⚙️ Installation Guide

### Prerequisites

- JDK 11 or higher
- Maven 3.6+
- MySQL/PostgreSQL
- Your favorite Java IDE (IntelliJ IDEA/Eclipse recommended)

### Setup Steps

1. **Clone the Repository**
   ```bash
   git clone https://github.com/your-username/medical-management-system.git
   cd medical-management-system
   ```

2. **Configure Database**

   Update `src/main/resources/persistence.xml`:
   ```xml
   <persistence-unit name="medical-management-system">
       <properties>
           <property name="javax.persistence.jdbc.url"
                     value="jdbc:mysql://localhost:3306/medical_db"/>
           <property name="javax.persistence.jdbc.user" value="your_username"/>
           <property name="javax.persistence.jdbc.password" value="your_password"/>
           <property name="javax.persistence.jdbc.driver"
                     value="com.mysql.cj.jdbc.Driver"/>
       </properties>
   </persistence-unit>
   ```

3. **Build and Run**
   ```bash
   mvn clean install
   java -jar target/medical-management-system.jar
   ```

## 🔌 API Reference

### Authentication Endpoints

```http
POST /api/auth/login
POST /api/auth/logout
POST /api/auth/register
```

### Patient Endpoints

```http
GET    /api/patients/{id}
POST   /api/patients
PUT    /api/patients/{id}
DELETE /api/patients/{id}
GET    /api/patients/{id}/medical-records
POST   /api/patients/{id}/appointments
```

### Doctor Endpoints

```http
GET    /api/doctors/{id}
POST   /api/doctors
PUT    /api/doctors/{id}
DELETE /api/doctors/{id}
POST   /api/doctors/{id}/time-slots
POST   /api/doctors/{id}/prescriptions
```

### Request/Response Examples

#### Create New Patient
```json
POST /api/patients
{
    "numSecuriteSociale": "123456789",
    "dateNaissance": "1990-01-01",
    "utilisateur": {
        "nom": "Doe",
        "prenom": "John",
        "email": "john.doe@example.com",
        "telephone": "1234567890"
    }
}
```

## 🔒 Security

- JWT-based authentication
- Role-based access control (RBAC)
- Password encryption using BCrypt
- HTTPS encryption for all communications

## 🤝 Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request



## 🆘 Support

For support and queries:
- Create an issue on GitHub
- Contact: mohamedtergui01@gmail..com


## 🙏 Acknowledgments

- All contributors who have helped with code, bug reports, and suggestions
- The open-source community for providing excellent tools and frameworks
- Healthcare professionals who provided domain expertise

---

Developed with ❤️ for better healthcare management